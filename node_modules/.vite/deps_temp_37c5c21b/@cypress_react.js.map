{
  "version": 3,
  "sources": ["../../react-dom/client.js", "../../@cypress/react/dist/cypress-react.esm-bundler.js"],
  "sourcesContent": ["'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n", "\n/**\n * @cypress/react v0.0.0-development\n * (c) 2025 Cypress.io\n * Released under the MIT License\n */\n\nimport * as React from 'react';\nimport ReactDOM from 'react-dom/client';\n\n/**\n * Gets the display name of the component when possible.\n * @param type {JSX} The type object returned from creating the react element.\n * @param fallbackName {string} The alias, or fallback name to use when the name cannot be derived.\n * @link https://github.com/facebook/react-devtools/blob/master/backend/getDisplayName.js\n */\nfunction getDisplayName(node, fallbackName = 'Unknown') {\n    const type = node === null || node === void 0 ? void 0 : node.type;\n    if (!type) {\n        return fallbackName;\n    }\n    let displayName = null;\n    // The displayName property is not guaranteed to be a string.\n    // It's only safe to use for our purposes if it's a string.\n    // github.com/facebook/react-devtools/issues/803\n    if (typeof type.displayName === 'string') {\n        displayName = type.displayName;\n    }\n    if (!displayName) {\n        displayName = type.name || fallbackName;\n    }\n    // Facebook-specific hack to turn \"Image [from Image.react]\" into just \"Image\".\n    // We need displayName with module name for error reports but it clutters the DevTools.\n    const match = displayName.match(/^(.*) \\[from (.*)\\]$/);\n    if (match) {\n        const componentName = match[1];\n        const moduleName = match[2];\n        if (componentName && moduleName) {\n            if (moduleName === componentName ||\n                moduleName.startsWith(`${componentName}.`)) {\n                displayName = componentName;\n            }\n        }\n    }\n    return displayName;\n}\n\nconst ROOT_SELECTOR = '[data-cy-root]';\n/**\n * Gets the root element used to mount the component.\n * @returns {HTMLElement} The root element\n * @throws {Error} If the root element is not found\n */\nconst getContainerEl = () => {\n    const el = document.querySelector(ROOT_SELECTOR);\n    if (el) {\n        return el;\n    }\n    throw Error(`No element found that matches selector ${ROOT_SELECTOR}. Please add a root element with data-cy-root attribute to your \"component-index.html\" file so that Cypress can attach your component to the DOM.`);\n};\n/**\n * Utility function to register CT side effects and run cleanup code during the \"test:before:run\" Cypress hook\n * @param optionalCallback Callback to be called before the next test runs\n */\nfunction setupHooks(optionalCallback) {\n    // We don't want CT side effects to run when e2e\n    // testing so we early return.\n    // System test to verify CT side effects do not pollute e2e: system-tests/test/e2e_with_mount_import_spec.ts\n    if (Cypress.testingType !== 'component') {\n        return;\n    }\n    // When running component specs, we cannot allow \"cy.visit\"\n    // because it will wipe out our preparation work, and does not make much sense\n    // thus we overwrite \"cy.visit\" to throw an error\n    Cypress.Commands.overwrite('visit', () => {\n        throw new Error('cy.visit from a component spec is not allowed');\n    });\n    Cypress.Commands.overwrite('session', () => {\n        throw new Error('cy.session from a component spec is not allowed');\n    });\n    Cypress.Commands.overwrite('origin', () => {\n        throw new Error('cy.origin from a component spec is not allowed');\n    });\n    // @ts-ignore\n    Cypress.on('test:before:after:run:async', () => {\n        optionalCallback === null || optionalCallback === void 0 ? void 0 : optionalCallback();\n    });\n}\n\nlet mountCleanup;\n/**\n * Create an `mount` function. Performs all the non-React-version specific\n * behavior related to mounting. The React-version-specific code\n * is injected. This helps us to maintain a consistent public API\n * and handle breaking changes in React's rendering API.\n *\n * This is designed to be consumed by `npm/react{16,17,18}`, and other React adapters,\n * or people writing adapters for third-party, custom adapters.\n */\nconst makeMountFn = (type, jsx, options = {}, rerenderKey, internalMountOptions) => {\n    if (!internalMountOptions) {\n        throw Error('internalMountOptions must be provided with `render` and `reactDom` parameters');\n    }\n    mountCleanup = internalMountOptions.cleanup;\n    return cy\n        .then(() => {\n        var _a, _b, _c;\n        const reactDomToUse = internalMountOptions.reactDom;\n        const el = getContainerEl();\n        if (!el) {\n            throw new Error([\n                `[@cypress/react] ðŸ”¥ Hmm, cannot find root element to mount the component. Searched for ${ROOT_SELECTOR}`,\n            ].join(' '));\n        }\n        const key = rerenderKey !== null && rerenderKey !== void 0 ? rerenderKey : \n        // @ts-ignore provide unique key to the the wrapped component to make sure we are rerendering between tests\n        (((_c = (_b = (_a = Cypress === null || Cypress === void 0 ? void 0 : Cypress.mocha) === null || _a === void 0 ? void 0 : _a.getRunner()) === null || _b === void 0 ? void 0 : _b.test) === null || _c === void 0 ? void 0 : _c.title) || '') + Math.random();\n        const props = {\n            key,\n        };\n        const reactComponent = React.createElement(options.strict ? React.StrictMode : React.Fragment, props, jsx);\n        // since we always surround the component with a fragment\n        // let's get back the original component\n        const userComponent = reactComponent.props.children;\n        internalMountOptions.render(reactComponent, el, reactDomToUse);\n        return (cy.wrap(userComponent, { log: false })\n            .then(() => {\n            return cy.wrap({\n                component: userComponent,\n                rerender: (newComponent) => makeMountFn('rerender', newComponent, options, key, internalMountOptions),\n            }, { log: false });\n        })\n            // by waiting, we delaying test execution for the next tick of event loop\n            // and letting hooks and component lifecycle methods to execute mount\n            // https://github.com/bahmutov/cypress-react-unit-test/issues/200\n            .wait(0, { log: false })\n            .then(() => {\n            if (options.log !== false) {\n                // Get the display name property via the component constructor\n                // @ts-ignore FIXME\n                const componentName = getDisplayName(jsx);\n                const jsxComponentName = `<${componentName} ... />`;\n                Cypress.log({\n                    name: type,\n                    type: 'parent',\n                    message: [jsxComponentName],\n                    // @ts-ignore\n                    $el: el.children.item(0),\n                    consoleProps: () => {\n                        return {\n                            // @ts-ignore protect the use of jsx functional components use ReactNode\n                            props: jsx === null || jsx === void 0 ? void 0 : jsx.props,\n                            description: type === 'mount' ? 'Mounts React component' : 'Rerenders mounted React component',\n                            home: 'https://github.com/cypress-io/cypress',\n                        };\n                    },\n                });\n            }\n        }));\n        // Bluebird types are terrible. I don't think the return type can be carried without this cast\n    });\n};\n/**\n * Create an `unmount` function. Performs all the non-React-version specific\n * behavior related to unmounting.\n *\n * This is designed to be consumed by `npm/react{16,17,18}`, and other React adapters,\n * or people writing adapters for third-party, custom adapters.\n *\n * @param {UnmountArgs} options used during unmounting\n */\nconst makeUnmountFn = (options) => {\n    return cy.then(() => {\n        var _a;\n        const wasUnmounted = mountCleanup === null || mountCleanup === void 0 ? void 0 : mountCleanup();\n        if (wasUnmounted && options.log) {\n            Cypress.log({\n                name: 'unmount',\n                type: 'parent',\n                message: [(_a = options.boundComponentMessage) !== null && _a !== void 0 ? _a : 'Unmounted component'],\n                consoleProps: () => {\n                    return {\n                        description: 'Unmounts React component',\n                        parent: getContainerEl().parentNode,\n                        home: 'https://github.com/cypress-io/cypress',\n                    };\n                },\n            });\n        }\n    });\n};\n// Cleanup before each run\n// NOTE: we cannot use unmount here because\n// we are not in the context of a test\nconst preMountCleanup = () => {\n    mountCleanup === null || mountCleanup === void 0 ? void 0 : mountCleanup();\n};\nconst _mount = (jsx, options = {}) => makeMountFn('mount', jsx, options);\nconst createMount = (defaultOptions) => {\n    return (element, options) => {\n        return _mount(element, Object.assign(Object.assign({}, defaultOptions), options));\n    };\n};\n// Side effects from \"import { mount } from '@cypress/<my-framework>'\" are annoying, we should avoid doing this\n// by creating an explicit function/import that the user can register in their 'component.js' support file,\n// such as:\n//    import 'cypress/<my-framework>/support'\n// or\n//    import { registerCT } from 'cypress/<my-framework>'\n//    registerCT()\n// Note: This would be a breaking change\n// it is required to unmount component in beforeEach hook in order to provide a clean state inside test\n// because `mount` can be called after some preparation that can side effect unmount\n// @see npm/react/cypress/component/advanced/set-timeout-example/loading-indicator-spec.js\nsetupHooks(preMountCleanup);\n\nlet root;\nconst cleanup = () => {\n    if (root) {\n        root.unmount();\n        root = null;\n        return true;\n    }\n    return false;\n};\n/**\n * Mounts a React component into the DOM.\n * @param {import('react').JSX.Element} jsx The React component to mount.\n * @param {MountOptions} options Options to pass to the mount function.\n * @param {string} rerenderKey A key to use to force a rerender.\n *\n * @example\n * import { mount } from '@cypress/react'\n * import { Stepper } from './Stepper'\n *\n * it('mounts', () => {\n *   mount(<StepperComponent />)\n *   cy.get('[data-cy=increment]').click()\n *   cy.get('[data-cy=counter]').should('have.text', '1')\n * }\n *\n * @see {@link https://on.cypress.io/mounting-react} for more details.\n *\n * @returns {Cypress.Chainable<MountReturn>} The mounted component.\n */\nfunction mount(jsx, options = {}, rerenderKey) {\n    // Remove last mounted component if cy.mount is called more than once in a test\n    // React by default removes the last component when calling render, but we should remove the root\n    // to wipe away any state\n    cleanup();\n    const internalOptions = {\n        reactDom: ReactDOM,\n        render: (reactComponent, el) => {\n            if (!root) {\n                root = ReactDOM.createRoot(el);\n            }\n            return root.render(reactComponent);\n        },\n        unmount: internalUnmount,\n        cleanup,\n    };\n    return makeMountFn('mount', jsx, Object.assign({ ReactDom: ReactDOM }, options), rerenderKey, internalOptions);\n}\nfunction internalUnmount(options = { log: true }) {\n    return makeUnmountFn(options);\n}\n\nexport { createMount, getContainerEl, makeMountFn, makeUnmountFn, mount };\n"],
  "mappings": "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",
  "names": ["ReactDOM"]
}
